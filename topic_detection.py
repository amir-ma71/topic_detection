# coding: utf8
import re
import csv
import math
from collections import Counter
import operator
import networkx as nx
import numpy as np
import time
import winsound
from fuzzywuzzy import fuzz

stwd = [ '!' , '!!' , '!!!' , '!!!!' , '!!!!!' , '!؟' , '#' , '$' , '%' , '&' , '(' , ')' , '*' , '+' , ',' , '-' , '.' , '/' ,
         '0' , '1' , '2' , '3' , '4' , '5' , '6' , '60' , '7' , '8' , '9' , ':' , ';' , '< ' , '<< ' , '<< ' , '< ' , '=' ,
         '> ' , '>> ' , '>> ' , '> ' , '?' , '@' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' ,
         'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' , '^' , '_' , '_-' , 'a' , 'b' ,
         'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'http' , 'https' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' ,
         's' , 't' , 'u' , 'v' , 'w' , 'www' , 'x' , 'y' , 'z' , '{' , '}' , '«' , '»' , '،' , '؛' , '؟' , '؟!' , '؟!!' ,
         '؟؟' , '؟؟؟' , '؟؟؟؟' , 'ء' , 'آ' , 'آخرین' , 'آخه' , 'آره' , 'آری' , 'آقای' , 'آمد' , 'آمدن' , 'آمدند' , 'آمده' ,
         'آمده_است' , 'آن' , 'آنان' , 'آنجا' , 'آنرا' , 'آنقدر' , 'آنكه' , 'آنها' , 'آنهایی' , 'آنهم' , 'آنوقت' , 'آنچه' ,
         'آنکه' , 'آن‌ها' , 'آور' , 'آورد' , 'آوردن' , 'آوردند' , 'آورده' , 'آوردیم' , 'آوری' , 'آی' , 'آیا' , 'آید' , 'أ' ,
         'ؤ' , 'إ' , 'ئ' , 'ا' , 'ابتدا' , 'ات' , 'اثر' , 'اثرِ' , 'اخیر' , 'اخیرا' , 'از' , 'ازت' , 'ازش' , 'ازشون' , 'ازین' ,
         'اس' , 'است' , 'استفاد' , 'استفاده' , 'اش' , 'اصن' , 'اغلب' , 'اف' , 'افتاد' , 'افتادم' , 'افتادن' , 'افتاده' ,
         'افزود' , 'اقای' , 'اكنون' , 'ال' , 'الآن' , 'الان' , 'الانم' , 'البته' , 'البتّه' , 'الف' , 'الی' , 'ام' , 'اما' ,
         'امر' , 'امروز' , 'امسال' , 'امور' , 'امکان' , 'ان' , 'انجام' , 'اند' , 'انداخته' , 'انقدر' , 'انها' , 'انکه' ,
         'انگار' , 'انگیز' , 'او' , 'اوست' , 'اول' , 'اولین' , 'اومد' , 'اومدن' , 'اومده' , 'اون' , 'اونا' , 'اونایی' ,
         'اونقدر' , 'اونم' , 'اونها' , 'اونوقت' , 'اونی' , 'اکنون' , 'اگر' , 'اگرچه' , 'اگه' , 'ای' , 'ایا' , 'ایشان' ,
         'ایشون' , 'ایم' , 'این' , 'اینا' , 'اینایی' , 'اینبار' , 'اینجا' , 'اینجاست' , 'اینجور' , 'اینجوری' , 'اینطور' ,
         'اینقدر' , 'اینقد' , 'اینكه' , 'اینم' , 'اینه' , 'اینها' , 'اینهمه' , 'اینو' , 'اینک' , 'اینکه' , 'اینگونه' , 'این‌ها' ,
         'ایی' , 'ای‌ها' , 'ب' , 'با' , 'بابت' , 'بار' , 'بارة' , 'باره' , 'باز' , 'بازخواهیم' , 'بازم' , 'باش' , 'باشد' ,
         'باشم' , 'باشند' , 'باشه' , 'باشی' , 'باشید' , 'باشیم' , 'باشین' , 'باعث' , 'بالا' , 'بالایِ' , 'بان' , 'باهم' ,'میگردد' ,
         'باید' , 'ببرد' , 'ببرن' , 'ببرند' , 'ببره' , 'ببرید' , 'ببریم' , 'ببینم' , 'ببینن' , 'ببینند' , 'ببینه' , 'ببینید' ,
         'ببینیم' , 'بتواند' , 'بتوانند' , 'بجز' , 'بخواد' , 'بخوان' , 'بخواهد' , 'بخواهند' , 'بخورن' , 'بخوره' , 'بداند' ,
         'بدانند' , 'بدانید' , 'بدانیم' , 'بدلیل' , 'بدم' , 'بده' , 'بدهد' , 'بدهند' , 'بدهید' , 'بدهیم' , 'بدون' , 'بدید' ,
         'بدیم' , 'بدین' , 'بذارن' , 'بذاره' , 'بر' , 'برا' , 'برابر' , 'برابرِ' , 'براساس' , 'براش' , 'براشون' , 'برامون' ,
         'برای' , 'برایت' , 'برایش' , 'برایِ' , 'برخوردار' , 'برخی' , 'برداری' , 'برداشتن' , 'بردن' , 'بردند' , 'برسد' ,
         'برسه' , 'برم' , 'برمی' , 'برن' , 'بره' , 'برو' , 'برود' , 'بروز' , 'بروند' , 'بروید' , 'برگرده' , 'بری' , 'برید' ,
         'بریم' , 'بزن' , 'بزنن' , 'بزنند' , 'بزنه' , 'بزنی' , 'بزنید' , 'بزنیم' , 'بس' , 'بستن' , 'بسیار' , 'بسیاری' ,
         'بشم' , 'بشه' , 'بشود' , 'بشیم' , 'بطور' , 'بعد' , 'بعداز' , 'بعری' , 'بعضی' , 'بفرستید' , 'بفرمایید' , 'بلكه' ,
         'بله' , 'بلکه' , 'بلی' , 'بماند' , 'بن' , 'بنا' , 'بنابراین' , 'بندازن' , 'بندی' , 'بنظرم' , 'بنی' , 'به' , 'بهت' ,
         'بهتر' , 'بهترین' , 'بهتون' , 'بهش' , 'بهشون' , 'بهم' , 'بود' , 'بودم' , 'بودن' , 'بودند' , 'بوده' , 'بوده_است' ,
         'بوده_اند' , 'بودید' , 'بودیم' , 'بکشند' , 'بکشه' , 'بکند' , 'بکنن' , 'بکنند' , 'بکنه' , 'بکنید' , 'بکنیم' ,
         'بگذارد' , 'بگذارند' , 'بگذارید' , 'بگذاریم' , 'بگم' , 'بگن' , 'بگه' , 'بگو' , 'بگوید' , 'بگویم' , 'بگویند' ,
         'بگویید' , 'بگوییم' , 'بگی' , 'بگید' , 'بگیر' , 'بگیرد' , 'بگیرم' , 'بگیرن' , 'بگیرند' , 'بگیره' , 'بگیری' ,
         'بگیرید' , 'بگیریم' , 'بگیم' , 'بی' , 'بیا' , 'بیاد' , 'بیارن' , 'بیاره' , 'بیان' , 'بیاورد' , 'بیاورند' , 'بیاید' ,
         'بیایند' , 'بیایید' , 'بیرون' , 'بیرونِ' , 'بیست' , 'بیش' , 'بیشتر' , 'بیشتری' , 'بیفته' , 'بین' , 'ة' , 'ت' ,
         'تا' , 'تازه' , 'تاكنون' , 'تان' , 'تاکنون' , 'تبدیل' , 'تحت' , 'ترتیب' , 'ترین' , 'تعیین' , 'تغییر' , 'تمام' ,
         'تمامی' , 'تن' , 'تو' , 'توان' , 'تواند' , 'توانست' , 'توانستن' , 'توانند' , 'توسط' , 'تولِ' , 'تون' , 'توی' ,
         'تویِ' , 'تی' , 'ث' , 'ج' , 'جا' , 'جای' , 'جایی' , 'جدا' , 'جدی' , 'جز' , 'جلویِ' , 'جناح' , 'جهت' , 'جوری' , 'ح' ,
         'حاضر' , 'حال' , 'حالا' , 'حالی' , 'حالیکه' , 'حتما' , 'حتی' , 'حد' , 'حداقل' , 'حدود' , 'حدودِ' , 'حل' , 'خ' , 'خاص' ,
         'خاطرنشان' , 'خان' , 'خب' , 'خصوص' , 'خواست' , 'خواستار' , 'خواستن' , 'خواستند' , 'خوانده' , 'خواه' , 'خواهد' ,
         'خواهد_بود' , 'خواهد_داد' , 'خواهد_داشت' , 'خواهد_شد' , 'خواهد_کرد' , 'خواهد_گرفت' , 'خواهند' , 'خواهند_شد' ,
         'خواهند_کرد' , 'خواهیم' , 'خواهیم_بود' , 'خواهیم_کرد' , 'خود' , 'خودت' , 'خودتون' , 'خودش' , 'خودشو' , 'خودشون' ,
         'خودم' , 'خودمون' , 'خور' , 'خورد' , 'خورده' , 'خوندن' , 'خویش' , 'خیاه' , 'خیلی' , 'د' , 'داد' , 'دادم' , 'دادن' ,
         'دادند' , 'داده' , 'داده_است' , 'داده_اند' , 'داده_بود' , 'داده_شد' , 'دادی' , 'دادید' , 'دادیم' , 'دار' , 'دارای' ,
         'دارد' , 'دارم' , 'دارند' , 'داره' , 'داری' , 'دارید' , 'داریم' , 'دارین' , 'داشت' , 'داشتم' , 'داشتن' , 'داشتند' ,
         'داشته' , 'داشته_است' , 'داشته_اند' , 'داشته_باشد' , 'داشته_باشند' , 'داشته_باشید' , 'داشته_باشیم' , 'داشتیم' ,
         'دانست' , 'دانند' , 'در' , 'دراین' , 'درباره' , 'درحالیکه' , 'درون' , 'دری' , 'دسته' , 'دنبالِ' , 'ده' , 'دهد' ,
         'دهند' , 'دهنده' , 'دهه' , 'دهید' , 'دهیم' , 'دو' , 'دوباره' , 'دور' , 'دوم' , 'دچار' , 'دیدن' , 'دیده' , 'دیدید' ,
         'دیدیم' , 'دیگر' , 'دیگران' , 'دیگری' , 'دیگه' , 'دیگه‌ای' , 'ذ' , 'ذیل' , 'ر' , 'را' , 'رابه' , 'راه' , 'رسانده' ,
         'رسید' , 'رسیدن' , 'رسیده_است' , 'رسیدیم' , 'رفت' , 'رفتم' , 'رفتن' , 'رفتند' , 'رفته' , 'رفته_است' , 'رفتی' ,
         'رفتیم' , 'ره' , 'رو' , 'روب' , 'روبه' , 'روز' , 'روزهای' , 'روش' , 'روند' , 'روی' , 'رویِ' , 'ز' , 'زاد' ,
         'زاده' , 'زد' , 'زدم' , 'زدن' , 'زدند' , 'زده' , 'زده_اند' , 'زدیم' , 'زمانی' , 'زمینه' , 'زیاد' , 'زیادی' ,
         'زیر' , 'زیرا' , 'زیرِ' , 'س' , 'ساختن' , 'ساخته' , 'ساز' , 'سازی' , 'ساله' , 'سال‌های' , 'سایر' , 'سبب' , 'ست' ,
         'سراسر' , 'سریِ' , 'سعی' , 'سمت' , 'سمتِ' , 'سه' , 'سهم' , 'سوم' , 'سوی' , 'سویِ' , 'سپس' , 'سی' , 'ش' , 'شامل' ,
         'شان' , 'شاید' , 'شد' , 'شدم' , 'شدن' , 'شدند' , 'شده' , 'شده_است' , 'شده_اند' , 'شده_بود' , 'شده_بودند' , 'شدگان' ,
         'شدی' , 'شش' ,'شما' , 'شمار' , 'شماها' , 'شنیدم' , 'شه' , 'شو' ,
         'شود' , 'شون' , 'شوند' , 'شوید' , 'شویم' , 'ص' , 'صرف' , 'ض' ,
         'ضدِّ' , 'ضمن' , 'ط' , 'طبق' , 'طبقِ' , 'طرف' , 'طریق' , 'طور' , 'طوری' , 'طول' , 'طی' , 'ظ' , 'ظاهرا' , 'ع' , 'عالی' ,
         'عدم' , 'عقبِ' , 'علاوه' , 'علت' , 'علّتِ' , 'علیه' , 'عنوان' , 'عنوانِ' , 'عهده' , 'عین' , 'غ' , 'غیر' , 'ف' , 'فرد' ,
         'فردی' , 'فرستاد' , 'فرمود' , 'فرمودند' , 'فرموده_اند' , 'فعلا' , 'فقط' , 'فهمید' , 'فهمیدم' , 'فوق' , 'ق' , 'قابل' ,
         'قبل' , 'قبلا' , 'قرار' , 'قصدِ' , 'ك' , 'كرد' , 'كردم' , 'كردن' , 'كردند' , 'كرده' , 'كسی' , 'كل' , 'كمتر' , 'كند' ,
         'كنم' , 'كنند' , 'كنید' , 'كنیم' , 'كه' , 'ل' , 'لازم' , 'لحاظ' , 'لذا' , 'لطفاً' , 'م' , 'ما' , 'مان' , 'ماند' ,
         'ماندن' , 'مانده' , 'مانند' , 'مانندِ' , 'مبنی' , 'متر' , 'متوجه' , 'مث' , 'مثل' , 'مثلا' , 'مثلِ' , 'مثه' , 'محسوب' ,
         'مختلف' , 'مدت' , 'مدّتی' , 'مرا' , 'مربوط' , 'مشخص' , 'مقابل' , 'ممکن' , 'من' , 'مناسب' , 'منظور' , 'منم' , 'منو' ,
         'مهم' , 'مواجه' , 'موارد' , 'موجب' , 'مورد' , 'مون' , 'موندم' , 'مونده' , 'مگر' , 'مگه' , 'می' , 'میاد' , 'میارن' ,
         'میاره' , 'میان' , 'میباشد' , 'میبره' , 'میبینم' , 'میتوان' , 'میتواند' , 'میتوانند' , 'میتوانیم' , 'میتونه' ,
         'میخواد' , 'میخواست' , 'میخوام' , 'میخوان' , 'میخواهد' , 'میخواهند' , 'میخواهید' , 'میخوای' , 'میخورن' , 'میخوره' ,
         'میداد' , 'میدادن' , 'میداند' , 'میدانند' , 'میدانید' , 'میدم' , 'میدن' , 'میده' , 'میدهد' , 'میدهند' , 'میدونم' ,
         'میدونن' , 'میدونه' , 'میدونید' , 'میدیم' , 'میذارن' , 'میرسد' , 'میرسه' , 'میرفت' , 'میرم' , 'میرن' , 'میره' ,
         'میرود' , 'میری' , 'میریم' , 'میزد' , 'میزند' , 'میزنن' , 'میزنند' , 'میزنه' , 'میزنی' , 'میشد' , 'میشن' ,
         'میشه' , 'میشود' , 'میشوند' , 'میشیم' , 'میفته' , 'میمونه' , 'میندازن' , 'میندازه' , 'میومد' , 'میکرد' , 'میکردم' ,
         'میکردن' , 'میکردند' , 'میکردیم' , 'میکشن' , 'میکشه' , 'میکند' , 'میکنم' , 'میکنن' , 'میکنند' , 'میکنه' , 'میکنی' ,
         'میکنید' , 'میکنیم' , 'میگفت' , 'میگفتن' , 'میگم' , 'میگن' , 'میگه' , 'میگوید' , 'میگویند' , 'میگی' , 'میگیرد' ,
         'میگیرن' , 'میگیرند' , 'میگیره' , 'میگیم' , 'می‌آورد' , 'می‌آید' , 'می‌افتد' , 'می‌باشد' , 'می‌باشند' , 'می‌برد' ,
         'می‌برند' , 'می‌بینند' , 'می‌توان' , 'می‌تواند' , 'می‌توانند' , 'می‌توانید' , 'می‌تونه' , 'می‌خواد' , 'می‌خواست' , 'می‌خوان' ,
         'می‌خواهد' , 'می‌خواهند' , 'می‌خواهیم' , 'می‌خورد' , 'می‌داد' , 'می‌دادند' , 'می‌داند' , 'می‌دانم' , 'می‌دانند' , 'می‌دانید' ,
         'می‌ده' , 'می‌دهد' , 'می‌دهم' , 'می‌دهند' , 'می‌دهیم' , 'می‌رسد' , 'می‌رفت' , 'می‌رود' , 'می‌روند' , 'می‌زند' , 'می‌زنند' ,
         'می‌شد' , 'می‌شه' , 'می‌شود' , 'می‌شوند' , 'می‌شویم' , 'می‌ماند' , 'می‌کرد' , 'می‌کردم' , 'می‌کردن' , 'می‌کردند' , 'می‌کردیم' ,
         'می‌کشد' , 'می‌کند' , 'می‌کنم' , 'می‌کنن' , 'می‌کنند' , 'می‌کنه' , 'می‌کنی' , 'می‌کنید' , 'می‌کنیم' , 'می‌گذرد' , 'می‌گردد' ,
         'می‌گفت' , 'می‌گفتند' , 'می‌گن' , 'می‌گه' , 'می‌گوید' , 'می‌گویم' , 'می‌گویند' , 'می‌گیرد' , 'می‌گیرند' , 'می‌گیره' , 'می‌یابد' ,
         'ن' , 'ناشی' , 'نام' , 'نباشد' , 'نباشند' , 'نباشه' , 'نباشید' , 'نباید' , 'نبود' , 'نبودن' , 'نبودند' , 'نبوده' ,
         'نبوده_است' , 'نتوانست' , 'نحوه' , 'نخریدن' , 'نخست' , 'نخواهد' , 'نخواهد_بود' , 'نخواهد_داشت' , 'نخواهد_شد' ,
         'نخواهد_کرد' , 'نداد' , 'ندادن' , 'ندادند' , 'نداده' , 'ندارد' , 'ندارم' , 'ندارن' , 'ندارند' , 'نداره' , 'نداری' ,
         'ندارید' , 'نداریم' , 'نداشت' , 'نداشتن' , 'نداشته' , 'نداشته_باشد' , 'نداشتیم' , 'نده' , 'ندهند' , 'ندهید' ,
         'ندید' , 'نرسیده' , 'نرفته' , 'نره' , 'نزدِ' , 'نزدیک' , 'نزدیکِ' , 'نسبت' , 'نشان' , 'نشد' , 'نشدن' , 'نشده' ,
         'نشده_است' , 'نشست' , 'نشه' , 'نشود' , 'نشوند' , 'نشین' , 'نشینی' , 'نظرم' , 'نظیر' , 'نكرده' , 'نماید' , 'نمایند' ,
         'نمایی' , 'نمایید' , 'نمود' , 'نمودن' , 'نمودند' , 'نموده' , 'نموده_است' , 'نموده_اند' , 'نمی' , 'نمیاد' ,
         'نمیتواند' , 'نمیتونه' , 'نمیخواد' , 'نمیدن' , 'نمیده' , 'نمیدونم' , 'نمیدونه' , 'نمیشد' , 'نمیشه' , 'نمیشود' ,
         'نمیکند' , 'نمیکنم' , 'نمیکنن' , 'نمیکنند' , 'نمیکنه' , 'نمیکنید' , 'نمی‌آید' , 'نمی‌توان' , 'نمی‌تواند' , 'نمی‌توانند' ,
         'نمی‌دانم' , 'نمی‌دانند' , 'نمی‌دهد' , 'نمی‌دهند' , 'نمی‌شد' , 'نمی‌شود' , 'نمی‌کرد' , 'نمی‌کند' , 'نمی‌کنم' , 'نمی‌کنند' ,
         'نمی‌کنه' , 'نمی‌کنید' , 'نمی‌کنیم' , 'نه' , 'نو' , 'نوشت' , 'نوشتن' , 'نکرد' , 'نکردم' , 'نکردن' , 'نکردند' ,
         'نکرده' , 'نکرده_است' , 'نکرده_اند' , 'نکردیم' , 'نکن' , 'نکند' , 'نکنن' , 'نکنند' , 'نکنید' , 'نکنیم' , 'نگاه' ,
         'نگفت' , 'نگو' , 'نگیرید' , 'نیا' , 'نیاد' , 'نیاز' , 'نیز' , 'نیس' , 'نیست' , 'نیستند' , 'نیستید' , 'نیستیم' ,
         'نیمه' , 'ه' , 'ها' , 'هارو' , 'هاست' , 'هاش' , 'های' , 'هایش' , 'هایشان' , 'هایی' , 'هبچ' , 'هر' , 'هرجا' ,
         'هرچند' , 'هرچه' , 'هرچی' , 'هرکس' , 'هرگز' , 'هرگونه' , 'هزار' , 'هست' , 'هستش' , 'هستم' , 'هستن' , 'هستند' ,
         'هستید' , 'هستیم' , 'هفت' , 'هفتم' , 'هم' , 'همان' , 'همش' , 'همه' , 'همه‌ی' , 'همواره' , 'همون' , 'همچنان' ,
         'همچنین' , 'همچون' , 'همچین' , 'همگی' , 'همیشه' , 'همین' , 'همینجوری' , 'همینه' , 'هنوز' , 'هنگامِ' , 'هنگامی' ,
         'هی' , 'هیچ' , 'و' , 'وارد' , 'وجود' , 'ور' , 'وسطِ' , 'وضع' , 'وقتی' , 'وقتیکه' , 'ول' , 'ولی' , 'وگرنه' , 'وگو' ,
         'وی' , 'ى' , 'ي' , 'پ' , 'پاعینِ' , 'پر' , 'پرسید' , 'پس' , 'پی' , 'پیدا' , 'پیش' , 'پیشِ' , 'چ' , 'چرا' , 'چطور' ,
         'چطوری' , 'چقدر' , 'چنان' , 'چند' , 'چندین' , 'چنین' , 'چه' , 'چهار' , 'چهارم' , 'چون' , 'چکار' , 'چگونه' , 'چی' ,
         'چیز' , 'چیزی' , 'چیست' , 'چیه' , 'چیکار' , 'ژ' , 'ک' , 'کامل' , 'کاملا' , 'کجا' , 'کجاست' , 'کجایی' , 'کدام' ,
         'کدوم' , 'کرد' , 'کردم' , 'کردن' , 'کردند' , 'کرده' , 'کرده_است' , 'کرده_اند' , 'کرده_اید' , 'کرده_ایم' ,
         'کرده_بود' , 'کرده_بودند' , 'کردید' , 'کردیم' , 'کردین' , 'کس' , 'کسانی' , 'کسی' , 'کشتن' , 'کشید' , 'کشیدن' ,
         'کشیدند' , 'کل' , 'کلا' , 'کلی' , 'کم' , 'کمتر' , 'کمی' , 'کن' , 'کنار' , 'کنارِ' , 'کند' , 'کنم' , 'کنن' , 'کنند' ,
         'کننده' , 'کنندگان' , 'کنه' , 'کنون' , 'کنونی' , 'کنی' , 'کنید' , 'کنیم' , 'کنین' , 'که' , 'کوچک' , 'کَی' , 'کی' ,
         'گ' , 'گاه' , 'گذاری' , 'گذاشتن' , 'گذاشتند' , 'گذاشته' , 'گذراند' , 'گذشت' , 'گر' , 'گرایی' , 'گردد' , 'گردید' ,
         'گردیده' , 'گرفت' , 'گرفتم' , 'گرفتن' , 'گرفتند' , 'گرفته' , 'گرفته_است' , 'گرفته_اند' , 'گرفته_بود' , 'گرفتیم' ,
         'گروهی' , 'گرچه' , 'گفت' , 'گفتم' , 'گفتن' , 'گفتند' , 'گفته' , 'گفته_است' , 'گفته_اند' , 'گفته_بود' , 'گفته_می‌شود' ,
         'گفتیم' , 'گم' , 'گو' , 'گونه' , 'گوی' , 'گوید' , 'گویند' , 'گیر' , 'گیرد' , 'گیری' , 'ۀ' , 'ی' , 'یا' , 'یابد' ,
         'یادتونه' , 'یادم' , 'یافت' , 'یافته' , 'یافته_است' , 'یعنی' , 'یك' , 'یكدیگر' , 'یكی' , 'یه' , 'یک' , 'یکدیگر' ,
         'یکی' , '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '…']
char_b2 = ["Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L",
          "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A", "z", "y", "x", "w", "v", "u", "t", "s", "r", "q", "p",
          "o", "n", "m", "l", "k", "j", "i", "h", "g", "f", "e", "d", "c", "b", "a", "ك", "ؤ", "ء", "ئ", "أ", "إ", "ي",
          "ة", "آ", "ۀ", "ی", "ه", "و", "ن", "م", "ل", "گ", "ک", "ق", "ف", "غ", "ع", "ظ", "ط", "ض", "ص", "ش", "س", "ژ",
          "ز", "ر", "ذ", "د", "خ", "ح", "چ", "ج", "ث", "ت", "پ", "ب", "ا", "ـ", "ً", "ٌ", "ٍ", "َ", "ُ", "ِ", "ّ", "ۀ","ى"," ",
          ]
char_fa = [ "ء", "آ", "ی", "ه", "و", "ن", "م", "ل", "گ", "ک", "ق", "ف", "غ", "ع", "ظ", "ط", "ض", "ص", "ش", "س", "ژ",
          "ز", "ر", "ذ", "د", "خ", "ح", "چ", "ج", "ث", "ت", "پ", "ب", "ا","ى"," " ]

def cleaner_for_key(text):
    part = ""
    r = ""
    r1 = ""
    r2 = ""
    r3 = ""
    r4 = ""
    r5 = ""
    # جهت پاک کردن متون چینی اول و آخر خط     #
    text = "瀯" + text + "111瀯"
    f = list(text.replace("ي","ی").replace("ى","ی").replace("ة","ه").replace("ۀ","ه").replace("ؤ","و").replace("إ","ا").replace("أ","ا").replace("ك","ک").replace("ـ","").replace("ئ","ی").replace("ّ","").replace("ً","").replace("ٌ","").replace("ٍ","").replace("َ","").replace("ُ","").replace("ِ",""))
    for j in f:
        if j not in char_fa:
            j = "~@~"
        r5 = r4
        r4 = r3
        r3 = r2
        r2 = r1
        r1 = j
        if r1 == "~@~":
            if r3 == "~@~":
                r2 = "~@~"
        if r1 == "~@~":
            if r4 == "~@~":
                r2 = "~@~"
                r3 = "~@~"
        if r1 == "~@~":
            if r5 == "~@~":
                r2 = "~@~"
                r3 = "~@~"
                r4 = "~@~"
        if r5 == "~@~":
            r5 = " "
        r = r + r5
    return (re.sub(' +',' ',r).strip())
def cleaner_for_key2(text):
    r = ""
    # جهت پاک کردن متون چینی اول و آخر خط     #
    f = list(text.replace("ي","ی").replace("ى","ی").replace("ة","ه").replace("ۀ","ه").replace("ؤ","و").replace("إ","ا").replace("أ","ا").replace("ك","ک").replace("ـ","").replace("ئ","ی").replace("ّ","").replace("ً","").replace("ٌ","").replace("ٍ","").replace("َ","").replace("ُ","").replace("ِ",""))
    for j in f:
        if j not in char_fa:
            j = " "
        r = r + j
    return (re.sub(' +',' ',r).strip())
with open(r"DB_TS-numeric.csv", mode='r', encoding='utf-8') as db:
    db.readline()  # ignore first line (header)
    mydict = dict(csv.reader(db, delimiter=','))
with open(r"jaam_DB_1m.csv", mode='r', encoding='utf-8') as db2:
    db2.readline()  # ignore first line (header)
    mydict2 = dict(csv.reader(db2, delimiter=','))
with open(r"eslah.csv", mode='r', encoding='utf-8') as db3:
    db3.readline()  # ignore first line (header)
    eslah = dict(csv.reader(db3, delimiter=','))



number = 1
top_key = {}
g = nx.Graph()
def keywords(text,number=5):
    key5 = {}
    part = []
    export_key=[]
    zarib_sabet = 1.0501005
    keys = cleaner_for_key2(text).split()
    for key in keys:
        if key not in stwd:
            if key in eslah:
                part.append(eslah[key])
            else:
                part.append(key)
    first_count = Counter(part)
    top_count = 1
    if len(part)>0:
        top_count = first_count.most_common(1)[0] #تعداد پرتکرارترین واژه
    else:
        top_count = 1
    if len(text)<1000:
        for k1, c1 in first_count.items():
            if k1 in mydict:
                zarib = (0.5 + ((0.5 * int(c1)) / int(top_count[1]))) * zarib_sabet + float(mydict[k1])
            else:
                zarib = (0.5 + ((0.5 * int(c1)) / int(top_count[1]))) * zarib_sabet
            key5[k1]=zarib
    else:
        for k1, c1 in first_count.items():
            if k1 in mydict2:
                zarib = (0.5 + ((0.5 * int(c1)) / int(top_count[1]))) * (math.log(1000000,10) - math.log(float(mydict2[k1]),10))
            else:
                zarib = (0.5 + ((0.5 * int(c1)) / int(top_count[1])))
            key5[k1] = zarib
    for kw in sorted(key5.items(), key=operator.itemgetter(1))[::-1][0:number]:
        export_key.append(kw[0])
    # return ','.join(export_key)
    return export_key
with open ('text.txt',encoding='utf-8') as file:
    for line in file:
        if number > 1 :
            keys = keywords(line)
            if len(keys)==1:
                if keys[0] in g.nodes():
                    g.node[keys[0]]['weight'] += 1
                    top_key[keys[0]] += 1
                else:
                    g.add_node(keys[0],weight=1)
                    top_key[keys[0]] = 1
            else:
                for k in keys:
                    if k in top_key:
                        g.node[k]['weight'] += 1
                        top_key[k] += 1
                    else:
                        g.add_node(k,weight=1)
                        top_key[k] = 1
            for so in range(0, len(keys)):
                for ta in range(so + 1, len(keys)):
                    if g.has_edge(keys[so], keys[ta]):
                        g[keys[so]][keys[ta]]['weight'] += 1
                    else:
                        g.add_edge(keys[so], keys[ta], weight=1)
        if number % 1000 == 0:
            print(number, "/")
        number += 1
node_number = 200
# print (sorted(top_key.items(), key=operator.itemgetter(1))[::-1][:10] )
top_key_spliter = sorted(top_key.items(), key=operator.itemgetter(1))[::-1][node_number:len(g.nodes())]
# print(spliter_g,len(g.nodes()) )
for kw in top_key_spliter:
    if kw[0] in g:
        g.remove_node(str(kw[0]))
nx.write_gexf(g, 'DataMining_mag.gexf')

t0 = time.time()
# print (sorted(nx.triangles(g).items(), key=operator.itemgetter(1))[::-1][:10] )

def get_cliques_by_length(G, length_clique):
    """ Return the list of all cliques in an undirected graph G with length
    equal to length_clique. """
    cliques = []
    for c in nx.enumerate_all_cliques(G) :
        if len(c) <= length_clique:
            if len(c) == length_clique:
                cliques.append(c)
        else:
            return cliques
    # return empty list if nothing is found
    return cliques





def sigmoid(x):
  return 1 / (1 + math.exp(-x))


def mean_yaals(list_node):
    weight =[]
    for i in range(len(list_node)):
        for j in range(i+1,len(list_node)):
            weight.append(g[list_node[i]][list_node[j]]['weight'])
    return sum(weight)/len(weight)

def mean_node(test_list):
    weight =[]
    for i in range(len(test_list)):
            weight.append(g.node[test_list[i]]['weight'])
    return sum(weight)/len(weight)

def similarity(list1,list2):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            similarity_rate = fuzz.token_set_ratio(list1[i], list2[j])
            if similarity_rate >= 70 :
                count = count + 1
    if count >= 3 :
        return True
    else:
        return False





yaals = get_cliques_by_length(g,3)
# for yaal in yaals:
#     max_yaal = max([g[yaal[0]][yaal[1]]['weight'],g[yaal[0]][yaal[2]]['weight'],g[yaal[1]][yaal[2]]['weight']])
#     print(max_yaal)
#     print(yaal[0],yaal[1],yaal[2],'name--------nw' ,g.node[yaal[0]]['weight'],g.node[yaal[1]]['weight'],g.node[yaal[2]]['weight'],'nw---yw',g[yaal[0]][yaal[1]]['weight'],g[yaal[0]][yaal[2]]['weight'],g[yaal[1]][yaal[2]]['weight'])
#     # yaal[0]  واژه اول
    # yaal[1]  واژه دوم
    # g.node[yaal[0]]['weight']  وزن یا درشتی واژه اول
    # g[yaal[0]][yaal[1]]['weight'] وزن یا ضخامت یال بین واژه اول و دوم

## چک کردن درون هر لیست 3 تایی

max_yaal = (sorted([kk[2]['weight'] for kk in g.edges(data =True)])[-1])
max_node = (sorted([kk[1]['weight'] for kk in g.node(data =True)])[-1])
print("max node:",max_node)
print("max yaal:" , max_yaal)



final_list=[]
for first_yaal in range(len(yaals)):
    check = 0
    for i in range(3):
        for j in range(i+1 ,3):
            nesbat_node = ((g[yaals[first_yaal][i]][yaals[first_yaal][j]]['weight']))
            if nesbat_node >= (0.6*mean_yaals(yaals[first_yaal])) :
                check +=1
    if check ==3:
        final_list.append(yaals[first_yaal])
print("full list: " , len(yaals))
print("after first filter: ", len(final_list))




len_final_list = len(final_list)
counter =0
for first_tr in final_list:
    unity_node = set(g[first_tr[0]])
    for i in range(1, len(first_tr)):
        unity_node = unity_node.intersection(set(g[first_tr[i]]))  ## estekhraje eshterakate mosalas(ya harchi) ba node haye digar
    unity_node_list = list(unity_node)
    summ=0
    for j in unity_node_list:
        for i in range(len(first_tr)):
            summ+=g[j][first_tr[i]]['weight']
        mean_yaal= summ/len(first_tr)
        checker = 0
        for i in range(len(first_tr)):
            if ((g[j][first_tr[i]]['weight'])/mean_yaal) > 0.7 :
                checker+=1
            else:
                break
        if checker == len(first_tr) and ((mean_yaal/mean_yaals(first_tr))>0.2):
            test = first_tr.copy()
            test.append(j)
            final_list.append(test)
print("len final list befor remove:  ", len(final_list))




the_final=[]
dic_for_sort = {}
for i in final_list:
    dic_for_sort[",".join(i)]= len(i)*((mean_node(i))* (mean_yaals(i)) )
sorted_x = sorted(dic_for_sort.items(), key=operator.itemgetter(1))[::-1]
for j, k in sorted_x:
    # print("weight:",k,"---->",j)
    the_final.append(list(j.split(',')))




print("len the final:",len(the_final))
for i in range(len(the_final)):
    print(i , "-->", the_final[i])







t1 = time.time()
total = t1-t0
print("time spent: " ,total)


# Play Windows exit sound.
winsound.PlaySound("SystemHand", winsound.SND_ALIAS)

